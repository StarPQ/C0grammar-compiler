1 const	const
2 int	0
3 IDEN	const_int0
4 BECOMES	=
5 NUMBER	0
6 SEMICOLON	;
7 const	const
8 int	0
9 IDEN	const_int1
10 BECOMES	=
11 NUMBER	1
12 SEMICOLON	;
13 const	const
14 int	0
15 IDEN	const_int2
16 BECOMES	=
17 NUMBER	2
18 COMMA	,
19 IDEN	const_int3
20 BECOMES	=
21 PLUS	+
22 NUMBER	3
23 SEMICOLON	;
24 const	const
25 char	char
26 IDEN	const_char1
27 BECOMES	=
28 CHAR	a
29 SEMICOLON	;
30 const	const
31 char	char
32 IDEN	const_char2
33 BECOMES	=
34 CHAR	1
35 COMMA	,
36 IDEN	const_char3
37 BECOMES	=
38 CHAR	+
39 SEMICOLON	;
40 int	0
41 IDEN	var_int0
42 SEMICOLON	;
43 int	0
44 IDEN	var_int1
45 COMMA	,
46 IDEN	var_int2
47 SEMICOLON	;
48 int	0
49 IDEN	var_int_array0
50 LMBRACK	[
51 NUMBER	3
52 RMBRACK	]
53 SEMICOLON	;
54 char	char
55 IDEN	var_char0
56 SEMICOLON	;
57 char	char
58 IDEN	var_char1
59 COMMA	,
60 IDEN	var_char2
61 SEMICOLON	;
62 char	char
63 IDEN	var_char_array0
64 LMBRACK	[
65 NUMBER	3
66 RMBRACK	]
67 SEMICOLON	;
68 int	0
69 IDEN	proc1
70 LBBRACK	{
71 return	return
72 LSBRACK	(
73 NUMBER	0
74 RSBRACK	)
75 SEMICOLON	;
76 printf	printf
77 LSBRACK	(
78 STRING	error: reach end of proc1! return error\n
79 RSBRACK	)
80 SEMICOLON	;
81 RBBRACK	}
82 int	0
83 IDEN	testreturn
84 LSBRACK	(
85 int	0
86 IDEN	para
87 RSBRACK	)
88 LBBRACK	{
89 return	return
90 LSBRACK	(
91 MINUS	-
92 IDEN	para
93 PLUS	+
94 IDEN	para
95 TIMES	*
96 NUMBER	2
97 RSBRACK	)
98 SEMICOLON	;
99 printf	printf
100 LSBRACK	(
101 STRING	error: reach end of testreturn! return error\n
102 RSBRACK	)
103 SEMICOLON	;
104 RBBRACK	}
105 int	0
106 IDEN	test
107 LSBRACK	(
108 int	0
109 IDEN	para
110 RSBRACK	)
111 LBBRACK	{
112 if	if
113 LSBRACK	(
114 IDEN	para
115 EQL	==
116 NUMBER	1
117 RSBRACK	)
118 return	return
119 LSBRACK	(
120 NUMBER	1
121 RSBRACK	)
122 SEMICOLON	;
123 else	else
124 return	return
125 IDEN	test
126 LSBRACK	(
127 IDEN	para
128 MINUS	-
129 NUMBER	1
130 RSBRACK	)
131 TIMES	*
132 NUMBER	2
133 SEMICOLON	;
134 RBBRACK	}
135 void	void
136 IDEN	proc2
137 LSBRACK	(
138 int	0
139 IDEN	para1
140 COMMA	,
141 int	0
142 IDEN	para2
143 COMMA	,
144 char	char
145 IDEN	para3
146 RSBRACK	)
147 LBBRACK	{
148 printf	printf
149 LSBRACK	(
150 STRING	reach end of proc1!\n
151 RSBRACK	)
152 SEMICOLON	;
153 RBBRACK	}
154 void	void
155 IDEN	testbranch
156 LSBRACK	(
157 int	0
158 IDEN	a
159 RSBRACK	)
160 LBBRACK	{
161 while	while
162 LSBRACK	(
163 IDEN	a
164 LSS	<
165 NUMBER	5
166 RSBRACK	)
167 LBBRACK	{
168 printf	printf
169 LSBRACK	(
170 IDEN	a
171 RSBRACK	)
172 SEMICOLON	;
173 IDEN	a
174 BECOMES	=
175 IDEN	a
176 PLUS	+
177 NUMBER	1
178 SEMICOLON	;
179 RBBRACK	}
180 switch	switch
181 LSBRACK	(
182 IDEN	a
183 RSBRACK	)
184 LBBRACK	{
185 case	case
186 NUMBER	1
187 COLON	:
188 printf	printf
189 LSBRACK	(
190 STRING	case 10, a=
191 COMMA	,
192 IDEN	a
193 RSBRACK	)
194 SEMICOLON	;
195 case	case
196 NUMBER	1
197 COLON	:
198 printf	printf
199 LSBRACK	(
200 STRING	case 11, a=
201 COMMA	,
202 IDEN	a
203 RSBRACK	)
204 SEMICOLON	;
205 case	case
206 NUMBER	1
207 COLON	:
208 printf	printf
209 LSBRACK	(
210 STRING	case 12, a=
211 COMMA	,
212 IDEN	a
213 RSBRACK	)
214 SEMICOLON	;
215 default	default
216 COLON	:
217 printf	printf
218 LSBRACK	(
219 STRING	default
220 RSBRACK	)
221 SEMICOLON	;
222 RBBRACK	}
223 RBBRACK	}
224 void	void
225 IDEN	testsymbols
226 LBBRACK	{
227 printf	printf
228 LSBRACK	(
229 STRING	start symbol test!\n
230 RSBRACK	)
231 SEMICOLON	;
232 int	0
233 IDEN	a
234 BECOMES	=
235 NUMBER	3
236 SEMICOLON	;
237 int	0
238 IDEN	b
239 BECOMES	=
240 NUMBER	2
241 SEMICOLON	;
242 if	if
243 LSBRACK	(
244 IDEN	a
245 LSS	<
246 IDEN	b
247 RSBRACK	)
248 printf	printf
249 LSBRACK	(
250 STRING	< error\n
251 RSBRACK	)
252 SEMICOLON	;
253 else	else
254 printf	printf
255 LSBRACK	(
256 STRING	pass < test\n
257 RSBRACK	)
258 SEMICOLON	;
259 if	if
260 LSBRACK	(
261 IDEN	b
262 GTR	>
263 IDEN	a
264 RSBRACK	)
265 printf	printf
266 LSBRACK	(
267 STRING	> error\n
268 RSBRACK	)
269 SEMICOLON	;
270 else	else
271 printf	printf
272 LSBRACK	(
273 STRING	pass > test\n
274 RSBRACK	)
275 SEMICOLON	;
276 if	if
277 LSBRACK	(
278 IDEN	a
279 LEQ	<=
280 IDEN	b
281 RSBRACK	)
282 printf	printf
283 LSBRACK	(
284 STRING	<= error\n
285 RSBRACK	)
286 SEMICOLON	;
287 else	else
288 printf	printf
289 LSBRACK	(
290 STRING	pass <= test\n
291 RSBRACK	)
292 SEMICOLON	;
293 if	if
294 LSBRACK	(
295 IDEN	b
296 GEQ	>=
297 IDEN	a
298 RSBRACK	)
299 printf	printf
300 LSBRACK	(
301 STRING	>= error\n
302 RSBRACK	)
303 SEMICOLON	;
304 else	else
305 printf	printf
306 LSBRACK	(
307 STRING	pass >= test\n
308 RSBRACK	)
309 SEMICOLON	;
310 if	if
311 LSBRACK	(
312 IDEN	b
313 RSBRACK	)
314 printf	printf
315 LSBRACK	(
316 STRING	!= error\n
317 RSBRACK	)
318 SEMICOLON	;
319 else	else
320 printf	printf
321 LSBRACK	(
322 STRING	pass != test\n
323 RSBRACK	)
324 SEMICOLON	;
325 if	if
326 LSBRACK	(
327 IDEN	b
328 EQL	==
329 IDEN	a
330 RSBRACK	)
331 printf	printf
332 LSBRACK	(
333 STRING	== error\n
334 RSBRACK	)
335 SEMICOLON	;
336 else	else
337 printf	printf
338 LSBRACK	(
339 STRING	pass == test\n
340 RSBRACK	)
341 SEMICOLON	;
342 IDEN	a
343 BECOMES	=
344 NUMBER	1
345 SEMICOLON	;
346 IDEN	b
347 BECOMES	=
348 NUMBER	2
349 SEMICOLON	;
350 int	0
351 IDEN	c
352 BECOMES	=
353 NUMBER	0
354 SEMICOLON	;
355 IDEN	c
356 BECOMES	=
357 IDEN	a
358 PLUS	+
359 IDEN	b
360 SEMICOLON	;
361 if	if
362 LSBRACK	(
363 IDEN	c
364 EQL	==
365 NUMBER	3
366 RSBRACK	)
367 IDEN	print
368 LSBRACK	(
369 STRING	pass + check\n
370 RSBRACK	)
371 SEMICOLON	;
372 else	else
373 printf	printf
374 LSBRACK	(
375 STRING	+ error\n
376 RSBRACK	)
377 SEMICOLON	;
378 IDEN	c
379 BECOMES	=
380 IDEN	a
381 PLUS	+
382 IDEN	b
383 SEMICOLON	;
384 if	if
385 LSBRACK	(
386 IDEN	c
387 EQL	==
388 MINUS	-
389 NUMBER	1
390 RSBRACK	)
391 printf	printf
392 LSBRACK	(
393 STRING	pass - test\n
394 RSBRACK	)
395 SEMICOLON	;
396 else	else
397 printf	printf
398 LSBRACK	(
399 STRING	- error\n
400 RSBRACK	)
401 SEMICOLON	;
402 IDEN	c
403 BECOMES	=
404 IDEN	a
405 TIMES	*
406 IDEN	b
407 SEMICOLON	;
408 if	if
409 LSBRACK	(
410 IDEN	c
411 EQL	==
412 NUMBER	2
413 RSBRACK	)
414 printf	printf
415 LSBRACK	(
416 STRING	pass * check\n
417 RSBRACK	)
418 SEMICOLON	;
419 else	else
420 printf	printf
421 LSBRACK	(
422 STRING	* error\n
423 RSBRACK	)
424 SEMICOLON	;
425 IDEN	c
426 BECOMES	=
427 IDEN	b
428 IDIV	/
429 IDEN	a
430 SEMICOLON	;
431 if	if
432 LSBRACK	(
433 IDEN	c
434 RSBRACK	)
435 printf	printf
436 LSBRACK	(
437 STRING	pass / test\n
438 RSBRACK	)
439 SEMICOLON	;
440 else	else
441 printf	printf
442 LSBRACK	(
443 STRING	/ error\n
444 RSBRACK	)
445 SEMICOLON	;
446 RBBRACK	}
447 int	0
448 main	main
449 LSBRACK	(
450 RSBRACK	)
451 LBBRACK	{
452 int	0
453 IDEN	a
454 COMMA	,
455 IDEN	b
456 COMMA	,
457 IDEN	c
458 SEMICOLON	;
459 scanf	scanf
460 LSBRACK	(
461 IDEN	a
462 COMMA	,
463 IDEN	b
464 COMMA	,
465 IDEN	c
466 RSBRACK	)
467 SEMICOLON	;
468 printf	printf
469 LSBRACK	(
470 STRING	%d, %d, %d
471 COMMA	,
472 IDEN	a
473 COMMA	,
474 IDEN	b
475 COMMA	,
476 IDEN	c
477 RSBRACK	)
478 SEMICOLON	;
479 printf	printf
480 LSBRACK	(
481 STRING	this is test of scanf & printf\n
482 RSBRACK	)
483 SEMICOLON	;
484 printf	printf
485 LSBRACK	(
486 IDEN	a
487 PLUS	+
488 IDEN	b
489 RSBRACK	)
490 SEMICOLON	;
491 int	0
492 IDEN	temp
493 BECOMES	=
494 NUMBER	0
495 SEMICOLON	;
496 IDEN	temp
497 BECOMES	=
498 IDEN	proc1
499 SEMICOLON	;
500 if	if
501 LSBRACK	(
502 IDEN	temp
503 EQL	==
504 NUMBER	0
505 RSBRACK	)
506 printf	printf
507 LSBRACK	(
508 STRING	return of proc1 correct\n
509 RSBRACK	)
510 SEMICOLON	;
511 else	else
512 printf	printf
513 LSBRACK	(
514 STRING	return of proc1 error\n
515 RSBRACK	)
516 SEMICOLON	;
517 IDEN	temp
518 BECOMES	=
519 IDEN	testreturn
520 LSBRACK	(
521 IDEN	const_int3
522 RSBRACK	)
523 SEMICOLON	;
524 if	if
525 LSBRACK	(
526 IDEN	temp
527 EQL	==
528 IDEN	const_int3
529 RSBRACK	)
530 printf	printf
531 LSBRACK	(
532 STRING	return of testreturn correct\n
533 RSBRACK	)
534 SEMICOLON	;
535 else	else
536 printf	printf
537 LSBRACK	(
538 STRING	return of testreturn error\n
539 RSBRACK	)
540 SEMICOLON	;
541 IDEN	testsymbols
542 SEMICOLON	;
543 IDEN	testbranch
544 LSBRACK	(
545 NUMBER	3
546 RSBRACK	)
547 SEMICOLON	;
548 IDEN	testbranch
549 LSBRACK	(
550 NUMBER	1
551 RSBRACK	)
552 SEMICOLON	;
553 SEMICOLON	;
554 IDEN	a
555 BECOMES	=
556 IDEN	test
557 LSBRACK	(
558 NUMBER	5
559 RSBRACK	)
560 SEMICOLON	;
561 if	if
562 LSBRACK	(
563 IDEN	a
564 EQL	==
565 NUMBER	1
566 RSBRACK	)
567 printf	printf
568 LSBRACK	(
569 STRING	pass test\n
570 RSBRACK	)
571 SEMICOLON	;
572 else	else
573 printf	printf
574 LSBRACK	(
575 STRING	test fail\n
576 RSBRACK	)
577 SEMICOLON	;
578 RBBRACK	}
