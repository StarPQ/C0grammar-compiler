1 const	const
2 int	0
3 IDEN	cona
4 BECOMES	=
5 NUMBER	10
6 SEMICOLON	;
7 const	const
8 char	char
9 IDEN	conb
10 BECOMES	=
11 CHAR	a
12 COMMA	,
13 IDEN	conc
14 BECOMES	=
15 CHAR	6
16 SEMICOLON	;
17 int	10
18 IDEN	_cha
19 COMMA	,
20 IDEN	chb
21 LMBRACK	[
22 NUMBER	6
23 RMBRACK	]
24 SEMICOLON	;
25 char	char
26 IDEN	chc
27 COMMA	,
28 IDEN	chd
29 SEMICOLON	;
30 int	6
31 IDEN	f
32 LSBRACK	(
33 int	6
34 IDEN	x
35 COMMA	,
36 int	6
37 IDEN	y
38 RSBRACK	)
39 LBBRACK	{
40 const	const
41 int	6
42 IDEN	z
43 BECOMES	=
44 NUMBER	1
45 SEMICOLON	;
46 if	if
47 LSBRACK	(
48 IDEN	x
49 GTR	>
50 NUMBER	1
51 RSBRACK	)
52 return	return
53 LSBRACK	(
54 IDEN	x
55 PLUS	+
56 IDEN	z
57 RSBRACK	)
58 SEMICOLON	;
59 else	else
60 LBBRACK	{
61 RBBRACK	}
62 IDEN	x
63 BECOMES	=
64 IDEN	x
65 PLUS	+
66 NUMBER	1
67 SEMICOLON	;
68 IDEN	f
69 LSBRACK	(
70 IDEN	x
71 COMMA	,
72 IDEN	y
73 RSBRACK	)
74 SEMICOLON	;
75 return	return
76 LSBRACK	(
77 IDEN	x
78 PLUS	+
79 IDEN	y
80 RSBRACK	)
81 SEMICOLON	;
82 RBBRACK	}
83 int	1
84 IDEN	compare
85 LSBRACK	(
86 int	1
87 IDEN	a
88 COMMA	,
89 int	1
90 IDEN	b
91 RSBRACK	)
92 LBBRACK	{
93 if	if
94 LSBRACK	(
95 IDEN	a
96 GTR	>
97 IDEN	b
98 RSBRACK	)
99 return	return
100 LSBRACK	(
101 NUMBER	1
102 RSBRACK	)
103 SEMICOLON	;
104 else	else
105 LBBRACK	{
106 RBBRACK	}
107 if	if
108 LSBRACK	(
109 IDEN	a
110 LEQ	<=
111 IDEN	b
112 RSBRACK	)
113 return	return
114 LSBRACK	(
115 MINUS	-
116 NUMBER	1
117 RSBRACK	)
118 SEMICOLON	;
119 else	else
120 LBBRACK	{
121 RBBRACK	}
122 RBBRACK	}
123 void	void
124 IDEN	line
125 LSBRACK	(
126 int	1
127 IDEN	n
128 COMMA	,
129 int	1
130 IDEN	m
131 RSBRACK	)
132 LBBRACK	{
133 int	1
134 IDEN	i
135 COMMA	,
136 IDEN	j
137 COMMA	,
138 IDEN	stpos
139 LMBRACK	[
140 NUMBER	100
141 RMBRACK	]
142 COMMA	,
143 IDEN	posst
144 LMBRACK	[
145 NUMBER	100
146 RMBRACK	]
147 SEMICOLON	;
148 int	100
149 IDEN	p
150 COMMA	,
151 IDEN	q
152 COMMA	,
153 IDEN	move
154 COMMA	,
155 IDEN	end
156 COMMA	,
157 IDEN	po1
158 COMMA	,
159 IDEN	po2
160 COMMA	,
161 IDEN	st2
162 SEMICOLON	;
163 IDEN	i
164 BECOMES	=
165 NUMBER	1
166 SEMICOLON	;
167 IDEN	j
168 BECOMES	=
169 NUMBER	1
170 SEMICOLON	;
171 IDEN	stpos
172 LMBRACK	[
173 IDEN	i
174 RMBRACK	]
175 BECOMES	=
176 IDEN	i
177 SEMICOLON	;
178 IDEN	posst
179 LMBRACK	[
180 IDEN	i
181 RMBRACK	]
182 BECOMES	=
183 IDEN	i
184 SEMICOLON	;
185 IDEN	i
186 BECOMES	=
187 IDEN	i
188 PLUS	+
189 NUMBER	1
190 SEMICOLON	;
191 while	while
192 LSBRACK	(
193 IDEN	i
194 LEQ	<=
195 IDEN	n
196 RSBRACK	)
197 LBBRACK	{
198 IDEN	stpos
199 LMBRACK	[
200 IDEN	i
201 RMBRACK	]
202 BECOMES	=
203 IDEN	i
204 SEMICOLON	;
205 IDEN	posst
206 LMBRACK	[
207 IDEN	i
208 RMBRACK	]
209 BECOMES	=
210 IDEN	i
211 SEMICOLON	;
212 IDEN	i
213 BECOMES	=
214 IDEN	i
215 PLUS	+
216 NUMBER	1
217 SEMICOLON	;
218 RBBRACK	}
219 IDEN	i
220 BECOMES	=
221 NUMBER	1
222 SEMICOLON	;
223 if	if
224 LSBRACK	(
225 IDEN	i
226 EQL	==
227 NUMBER	1
228 RSBRACK	)
229 LBBRACK	{
230 IDEN	p
231 BECOMES	=
232 NUMBER	3
233 SEMICOLON	;
234 IDEN	q
235 BECOMES	=
236 NUMBER	2
237 SEMICOLON	;
238 RBBRACK	}
239 else	else
240 LBBRACK	{
241 RBBRACK	}
242 if	if
243 LSBRACK	(
244 IDEN	i
245 EQL	==
246 NUMBER	2
247 RSBRACK	)
248 LBBRACK	{
249 IDEN	p
250 BECOMES	=
251 NUMBER	8
252 SEMICOLON	;
253 IDEN	q
254 BECOMES	=
255 MINUS	-
256 NUMBER	3
257 SEMICOLON	;
258 RBBRACK	}
259 else	else
260 LBBRACK	{
261 RBBRACK	}
262 if	if
263 LSBRACK	(
264 IDEN	i
265 EQL	==
266 NUMBER	3
267 RSBRACK	)
268 LBBRACK	{
269 IDEN	p
270 BECOMES	=
271 NUMBER	3
272 SEMICOLON	;
273 IDEN	q
274 BECOMES	=
275 MINUS	-
276 NUMBER	2
277 SEMICOLON	;
278 RBBRACK	}
279 else	else
280 LBBRACK	{
281 RBBRACK	}
282 if	if
283 LSBRACK	(
284 IDEN	q
285 NEQ	!=
286 NUMBER	0
287 RSBRACK	)
288 LBBRACK	{
289 IDEN	move
290 BECOMES	=
291 IDEN	compare
292 LSBRACK	(
293 IDEN	q
294 COMMA	,
295 NUMBER	0
296 RSBRACK	)
297 SEMICOLON	;
298 IDEN	end
299 BECOMES	=
300 IDEN	move
301 TIMES	*
302 IDEN	q
303 SEMICOLON	;
304 IDEN	po1
305 BECOMES	=
306 IDEN	stpos
307 LMBRACK	[
308 IDEN	p
309 RMBRACK	]
310 SEMICOLON	;
311 IDEN	st2
312 BECOMES	=
313 IDEN	posst
314 LMBRACK	[
315 IDEN	po1
316 PLUS	+
317 IDEN	move
318 RMBRACK	]
319 SEMICOLON	;
320 IDEN	po2
321 BECOMES	=
322 IDEN	stpos
323 LMBRACK	[
324 IDEN	st2
325 RMBRACK	]
326 SEMICOLON	;
327 IDEN	posst
328 LMBRACK	[
329 IDEN	po1
330 RMBRACK	]
331 BECOMES	=
332 IDEN	st2
333 SEMICOLON	;
334 IDEN	stpos
335 LMBRACK	[
336 IDEN	st2
337 RMBRACK	]
338 BECOMES	=
339 IDEN	po1
340 SEMICOLON	;
341 IDEN	po1
342 BECOMES	=
343 IDEN	po2
344 SEMICOLON	;
345 IDEN	j
346 BECOMES	=
347 IDEN	j
348 PLUS	+
349 NUMBER	1
350 SEMICOLON	;
351 while	while
352 LSBRACK	(
353 IDEN	j
354 LEQ	<=
355 IDEN	end
356 RSBRACK	)
357 LBBRACK	{
358 IDEN	st2
359 BECOMES	=
360 IDEN	posst
361 LMBRACK	[
362 IDEN	po1
363 PLUS	+
364 IDEN	move
365 RMBRACK	]
366 SEMICOLON	;
367 IDEN	po2
368 BECOMES	=
369 IDEN	stpos
370 LMBRACK	[
371 IDEN	st2
372 RMBRACK	]
373 SEMICOLON	;
374 IDEN	posst
375 LMBRACK	[
376 IDEN	po1
377 RMBRACK	]
378 BECOMES	=
379 IDEN	st2
380 SEMICOLON	;
381 IDEN	stpos
382 LMBRACK	[
383 IDEN	st2
384 RMBRACK	]
385 BECOMES	=
386 IDEN	po1
387 SEMICOLON	;
388 IDEN	po1
389 BECOMES	=
390 IDEN	po2
391 SEMICOLON	;
392 IDEN	j
393 BECOMES	=
394 IDEN	j
395 PLUS	+
396 NUMBER	1
397 SEMICOLON	;
398 RBBRACK	}
399 IDEN	posst
400 LMBRACK	[
401 IDEN	po2
402 RMBRACK	]
403 BECOMES	=
404 IDEN	p
405 SEMICOLON	;
406 IDEN	stpos
407 LMBRACK	[
408 IDEN	p
409 RMBRACK	]
410 BECOMES	=
411 IDEN	stpos
412 LMBRACK	[
413 IDEN	p
414 RMBRACK	]
415 PLUS	+
416 IDEN	q
417 SEMICOLON	;
418 RBBRACK	}
419 else	else
420 LBBRACK	{
421 RBBRACK	}
422 IDEN	i
423 BECOMES	=
424 IDEN	i
425 PLUS	+
426 NUMBER	1
427 SEMICOLON	;
428 while	while
429 LSBRACK	(
430 IDEN	i
431 LEQ	<=
432 IDEN	m
433 RSBRACK	)
434 LBBRACK	{
435 if	if
436 LSBRACK	(
437 IDEN	i
438 EQL	==
439 NUMBER	1
440 RSBRACK	)
441 LBBRACK	{
442 IDEN	p
443 BECOMES	=
444 NUMBER	3
445 SEMICOLON	;
446 IDEN	q
447 BECOMES	=
448 NUMBER	2
449 SEMICOLON	;
450 RBBRACK	}
451 else	else
452 LBBRACK	{
453 RBBRACK	}
454 if	if
455 LSBRACK	(
456 IDEN	i
457 EQL	==
458 NUMBER	2
459 RSBRACK	)
460 LBBRACK	{
461 IDEN	p
462 BECOMES	=
463 NUMBER	8
464 SEMICOLON	;
465 IDEN	q
466 BECOMES	=
467 MINUS	-
468 NUMBER	3
469 SEMICOLON	;
470 RBBRACK	}
471 else	else
472 LBBRACK	{
473 RBBRACK	}
474 if	if
475 LSBRACK	(
476 IDEN	i
477 EQL	==
478 NUMBER	3
479 RSBRACK	)
480 LBBRACK	{
481 IDEN	p
482 BECOMES	=
483 NUMBER	3
484 SEMICOLON	;
485 IDEN	q
486 BECOMES	=
487 MINUS	-
488 NUMBER	2
489 SEMICOLON	;
490 RBBRACK	}
491 else	else
492 LBBRACK	{
493 RBBRACK	}
494 if	if
495 LSBRACK	(
496 IDEN	q
497 NEQ	!=
498 NUMBER	0
499 RSBRACK	)
500 LBBRACK	{
501 IDEN	move
502 BECOMES	=
503 IDEN	compare
504 LSBRACK	(
505 IDEN	q
506 COMMA	,
507 NUMBER	0
508 RSBRACK	)
509 SEMICOLON	;
510 IDEN	end
511 BECOMES	=
512 IDEN	move
513 TIMES	*
514 IDEN	q
515 SEMICOLON	;
516 IDEN	po1
517 BECOMES	=
518 IDEN	stpos
519 LMBRACK	[
520 IDEN	p
521 RMBRACK	]
522 SEMICOLON	;
523 IDEN	st2
524 BECOMES	=
525 IDEN	posst
526 LMBRACK	[
527 IDEN	po1
528 PLUS	+
529 IDEN	move
530 RMBRACK	]
531 SEMICOLON	;
532 IDEN	po2
533 BECOMES	=
534 IDEN	stpos
535 LMBRACK	[
536 IDEN	st2
537 RMBRACK	]
538 SEMICOLON	;
539 IDEN	posst
540 LMBRACK	[
541 IDEN	po1
542 RMBRACK	]
543 BECOMES	=
544 IDEN	st2
545 SEMICOLON	;
546 IDEN	stpos
547 LMBRACK	[
548 IDEN	st2
549 RMBRACK	]
550 BECOMES	=
551 IDEN	po1
552 SEMICOLON	;
553 IDEN	po1
554 BECOMES	=
555 IDEN	po2
556 SEMICOLON	;
557 IDEN	j
558 BECOMES	=
559 IDEN	j
560 PLUS	+
561 NUMBER	1
562 SEMICOLON	;
563 while	while
564 LSBRACK	(
565 IDEN	j
566 LEQ	<=
567 IDEN	end
568 RSBRACK	)
569 LBBRACK	{
570 IDEN	st2
571 BECOMES	=
572 IDEN	posst
573 LMBRACK	[
574 IDEN	po1
575 PLUS	+
576 IDEN	move
577 RMBRACK	]
578 SEMICOLON	;
579 IDEN	po2
580 BECOMES	=
581 IDEN	stpos
582 LMBRACK	[
583 IDEN	st2
584 RMBRACK	]
585 SEMICOLON	;
586 IDEN	posst
587 LMBRACK	[
588 IDEN	po1
589 RMBRACK	]
590 BECOMES	=
591 IDEN	st2
592 SEMICOLON	;
593 IDEN	stpos
594 LMBRACK	[
595 IDEN	st2
596 RMBRACK	]
597 BECOMES	=
598 IDEN	po1
599 SEMICOLON	;
600 IDEN	po1
601 BECOMES	=
602 IDEN	po2
603 SEMICOLON	;
604 IDEN	j
605 BECOMES	=
606 IDEN	j
607 PLUS	+
608 NUMBER	1
609 SEMICOLON	;
610 RBBRACK	}
611 IDEN	posst
612 LMBRACK	[
613 IDEN	po2
614 RMBRACK	]
615 BECOMES	=
616 IDEN	p
617 SEMICOLON	;
618 IDEN	stpos
619 LMBRACK	[
620 IDEN	p
621 RMBRACK	]
622 BECOMES	=
623 IDEN	stpos
624 LMBRACK	[
625 IDEN	p
626 RMBRACK	]
627 PLUS	+
628 IDEN	q
629 SEMICOLON	;
630 RBBRACK	}
631 else	else
632 LBBRACK	{
633 RBBRACK	}
634 IDEN	i
635 BECOMES	=
636 IDEN	i
637 PLUS	+
638 NUMBER	1
639 SEMICOLON	;
640 RBBRACK	}
641 printf	printf
642 LSBRACK	(
643 IDEN	posst
644 LMBRACK	[
645 NUMBER	1
646 RMBRACK	]
647 RSBRACK	)
648 SEMICOLON	;
649 IDEN	i
650 BECOMES	=
651 NUMBER	2
652 SEMICOLON	;
653 printf	printf
654 LSBRACK	(
655 IDEN	posst
656 LMBRACK	[
657 IDEN	i
658 RMBRACK	]
659 RSBRACK	)
660 SEMICOLON	;
661 IDEN	i
662 BECOMES	=
663 IDEN	i
664 PLUS	+
665 NUMBER	1
666 SEMICOLON	;
667 while	while
668 LSBRACK	(
669 IDEN	i
670 LEQ	<=
671 IDEN	n
672 RSBRACK	)
673 LBBRACK	{
674 printf	printf
675 LSBRACK	(
676 IDEN	posst
677 LMBRACK	[
678 IDEN	i
679 RMBRACK	]
680 RSBRACK	)
681 SEMICOLON	;
682 IDEN	i
683 BECOMES	=
684 IDEN	i
685 PLUS	+
686 NUMBER	1
687 SEMICOLON	;
688 RBBRACK	}
689 return	return
690 SEMICOLON	;
691 RBBRACK	}
692 char	char
693 IDEN	f2
694 LSBRACK	(
695 char	char
696 IDEN	x
697 RSBRACK	)
698 LBBRACK	{
699 int	1
700 IDEN	z2
701 SEMICOLON	;
702 IDEN	z2
703 BECOMES	=
704 NUMBER	1
705 SEMICOLON	;
706 IDEN	x
707 BECOMES	=
708 IDEN	x
709 PLUS	+
710 IDEN	z2
711 SEMICOLON	;
712 return	return
713 LSBRACK	(
714 IDEN	x
715 RSBRACK	)
716 SEMICOLON	;
717 RBBRACK	}
718 int	1
719 IDEN	fib
720 LSBRACK	(
721 int	1
722 IDEN	n
723 RSBRACK	)
724 LBBRACK	{
725 int	1
726 IDEN	result
727 SEMICOLON	;
728 if	if
729 LSBRACK	(
730 IDEN	n
731 EQL	==
732 NUMBER	0
733 RSBRACK	)
734 return	return
735 LSBRACK	(
736 NUMBER	0
737 RSBRACK	)
738 SEMICOLON	;
739 else	else
740 LBBRACK	{
741 RBBRACK	}
742 if	if
743 LSBRACK	(
744 IDEN	n
745 EQL	==
746 NUMBER	1
747 RSBRACK	)
748 return	return
749 LSBRACK	(
750 NUMBER	1
751 RSBRACK	)
752 SEMICOLON	;
753 else	else
754 LBBRACK	{
755 RBBRACK	}
756 IDEN	result
757 BECOMES	=
758 IDEN	fib
759 LSBRACK	(
760 IDEN	n
761 MINUS	-
762 NUMBER	1
763 RSBRACK	)
764 PLUS	+
765 IDEN	fib
766 LSBRACK	(
767 IDEN	n
768 MINUS	-
769 NUMBER	2
770 RSBRACK	)
771 SEMICOLON	;
772 return	return
773 LSBRACK	(
774 IDEN	result
775 RSBRACK	)
776 SEMICOLON	;
777 RBBRACK	}
778 void	void
779 IDEN	nest
780 LBBRACK	{
781 int	2
782 IDEN	a
783 LMBRACK	[
784 NUMBER	15
785 RMBRACK	]
786 SEMICOLON	;
787 int	15
788 IDEN	b
789 LMBRACK	[
790 NUMBER	15
791 RMBRACK	]
792 SEMICOLON	;
793 IDEN	a
794 LMBRACK	[
795 NUMBER	0
796 RMBRACK	]
797 BECOMES	=
798 NUMBER	1
799 SEMICOLON	;
800 IDEN	b
801 LMBRACK	[
802 NUMBER	1
803 RMBRACK	]
804 BECOMES	=
805 NUMBER	3
806 SEMICOLON	;
807 IDEN	a
808 LMBRACK	[
809 NUMBER	3
810 RMBRACK	]
811 BECOMES	=
812 NUMBER	4
813 SEMICOLON	;
814 IDEN	b
815 LMBRACK	[
816 NUMBER	4
817 RMBRACK	]
818 BECOMES	=
819 NUMBER	6
820 SEMICOLON	;
821 IDEN	a
822 LMBRACK	[
823 NUMBER	6
824 RMBRACK	]
825 BECOMES	=
826 NUMBER	8
827 SEMICOLON	;
828 IDEN	b
829 LMBRACK	[
830 IDEN	a
831 LMBRACK	[
832 IDEN	b
833 LMBRACK	[
834 IDEN	a
835 LMBRACK	[
836 IDEN	b
837 LMBRACK	[
838 IDEN	a
839 LMBRACK	[
840 NUMBER	0
841 RMBRACK	]
842 RMBRACK	]
843 RMBRACK	]
844 RMBRACK	]
845 RMBRACK	]
846 RMBRACK	]
847 BECOMES	=
848 NUMBER	2333
849 SEMICOLON	;
850 printf	printf
851 LSBRACK	(
852 IDEN	a
853 LMBRACK	[
854 NUMBER	0
855 RMBRACK	]
856 PLUS	+
857 IDEN	b
858 LMBRACK	[
859 NUMBER	8
860 RMBRACK	]
861 RSBRACK	)
862 SEMICOLON	;
863 return	return
864 SEMICOLON	;
865 RBBRACK	}
866 void	void
867 IDEN	t
868 LSBRACK	(
869 char	char
870 IDEN	x
871 RSBRACK	)
872 LBBRACK	{
873 if	if
874 LSBRACK	(
875 IDEN	x
876 GTR	>
877 CHAR	c
878 RSBRACK	)
879 return	return
880 SEMICOLON	;
881 else	else
882 LBBRACK	{
883 RBBRACK	}
884 IDEN	x
885 BECOMES	=
886 IDEN	x
887 PLUS	+
888 NUMBER	1
889 SEMICOLON	;
890 printf	printf
891 LSBRACK	(
892 IDEN	x
893 RSBRACK	)
894 SEMICOLON	;
895 IDEN	t
896 LSBRACK	(
897 IDEN	x
898 RSBRACK	)
899 SEMICOLON	;
900 return	return
901 SEMICOLON	;
902 RBBRACK	}
903 void	void
904 main	main
905 LSBRACK	(
906 RSBRACK	)
907 LBBRACK	{
908 const	const
909 int	1
910 IDEN	coz
911 BECOMES	=
912 NUMBER	3
913 SEMICOLON	;
914 int	3
915 IDEN	a
916 COMMA	,
917 IDEN	b
918 COMMA	,
919 IDEN	c
920 COMMA	,
921 IDEN	d
922 COMMA	,
923 IDEN	key
924 COMMA	,
925 IDEN	i
926 COMMA	,
927 IDEN	sz2
928 LMBRACK	[
929 NUMBER	5
930 RMBRACK	]
931 SEMICOLON	;
932 int	5
933 IDEN	cho
934 SEMICOLON	;
935 char	char
936 IDEN	sz
937 LMBRACK	[
938 NUMBER	5
939 RMBRACK	]
940 COMMA	,
941 IDEN	e
942 SEMICOLON	;
943 IDEN	chc
944 BECOMES	=
945 CHAR	+
946 SEMICOLON	;
947 IDEN	chd
948 BECOMES	=
949 CHAR	-
950 SEMICOLON	;
951 IDEN	b
952 BECOMES	=
953 PLUS	+
954 NUMBER	3
955 SEMICOLON	;
956 IDEN	i
957 BECOMES	=
958 NUMBER	0
959 SEMICOLON	;
960 IDEN	c
961 BECOMES	=
962 MINUS	-
963 NUMBER	2
964 SEMICOLON	;
965 IDEN	key
966 BECOMES	=
967 NUMBER	1
968 SEMICOLON	;
969 scanf	scanf
970 LSBRACK	(
971 IDEN	cho
972 RSBRACK	)
973 SEMICOLON	;
974 switch	switch
975 LSBRACK	(
976 IDEN	cho
977 RSBRACK	)
978 LBBRACK	{
979 case	case
980 NUMBER	0
981 COLON	:
982 LBBRACK	{
983 printf	printf
984 LSBRACK	(
985 STRING	test line:
986 RSBRACK	)
987 SEMICOLON	;
988 IDEN	line
989 LSBRACK	(
990 NUMBER	8
991 COMMA	,
992 NUMBER	3
993 RSBRACK	)
994 SEMICOLON	;
995 RBBRACK	}
996 case	case
997 NUMBER	1
998 COLON	:
999 LBBRACK	{
1000 printf	printf
1001 LSBRACK	(
1002 STRING	test fib:
1003 RSBRACK	)
1004 SEMICOLON	;
1005 IDEN	d
1006 BECOMES	=
1007 IDEN	fib
1008 LSBRACK	(
1009 IDEN	coz
1010 RSBRACK	)
1011 SEMICOLON	;
1012 printf	printf
1013 LSBRACK	(
1014 STRING	fib=
1015 COMMA	,
1016 IDEN	d
1017 RSBRACK	)
1018 SEMICOLON	;
1019 RBBRACK	}
1020 case	case
1021 NUMBER	2
1022 COLON	:
1023 LBBRACK	{
1024 IDEN	sz
1025 LMBRACK	[
1026 IDEN	i
1027 RMBRACK	]
1028 BECOMES	=
1029 CHAR	a
1030 SEMICOLON	;
1031 IDEN	sz2
1032 LMBRACK	[
1033 IDEN	i
1034 RMBRACK	]
1035 BECOMES	=
1036 IDEN	i
1037 SEMICOLON	;
1038 IDEN	i
1039 BECOMES	=
1040 IDEN	i
1041 PLUS	+
1042 NUMBER	1
1043 SEMICOLON	;
1044 while	while
1045 LSBRACK	(
1046 IDEN	i
1047 LSS	<
1048 NUMBER	5
1049 RSBRACK	)
1050 LBBRACK	{
1051 IDEN	sz
1052 LMBRACK	[
1053 IDEN	i
1054 RMBRACK	]
1055 BECOMES	=
1056 CHAR	a
1057 SEMICOLON	;
1058 IDEN	sz2
1059 LMBRACK	[
1060 IDEN	i
1061 RMBRACK	]
1062 BECOMES	=
1063 IDEN	i
1064 SEMICOLON	;
1065 IDEN	i
1066 BECOMES	=
1067 IDEN	i
1068 PLUS	+
1069 NUMBER	1
1070 SEMICOLON	;
1071 RBBRACK	}
1072 scanf	scanf
1073 LSBRACK	(
1074 IDEN	key
1075 COMMA	,
1076 IDEN	a
1077 RSBRACK	)
1078 SEMICOLON	;
1079 if	if
1080 LSBRACK	(
1081 IDEN	key
1082 LSS	<
1083 NUMBER	3
1084 RSBRACK	)
1085 LBBRACK	{
1086 IDEN	a
1087 BECOMES	=
1088 IDEN	a
1089 PLUS	+
1090 IDEN	b
1091 SEMICOLON	;
1092 printf	printf
1093 LSBRACK	(
1094 IDEN	a
1095 RSBRACK	)
1096 SEMICOLON	;
1097 RBBRACK	}
1098 else	else
1099 LBBRACK	{
1100 RBBRACK	}
1101 if	if
1102 LSBRACK	(
1103 IDEN	key
1104 LEQ	<=
1105 NUMBER	3
1106 RSBRACK	)
1107 LBBRACK	{
1108 IDEN	b
1109 BECOMES	=
1110 IDEN	b
1111 MINUS	-
1112 IDEN	a
1113 SEMICOLON	;
1114 IDEN	sz2
1115 LMBRACK	[
1116 NUMBER	0
1117 RMBRACK	]
1118 BECOMES	=
1119 IDEN	sz2
1120 LMBRACK	[
1121 NUMBER	0
1122 RMBRACK	]
1123 PLUS	+
1124 IDEN	b
1125 SEMICOLON	;
1126 IDEN	sz
1127 LMBRACK	[
1128 NUMBER	0
1129 RMBRACK	]
1130 BECOMES	=
1131 IDEN	sz
1132 LMBRACK	[
1133 NUMBER	0
1134 RMBRACK	]
1135 PLUS	+
1136 NUMBER	1
1137 SEMICOLON	;
1138 printf	printf
1139 LSBRACK	(
1140 IDEN	b
1141 RSBRACK	)
1142 SEMICOLON	;
1143 printf	printf
1144 LSBRACK	(
1145 IDEN	sz
1146 LMBRACK	[
1147 NUMBER	0
1148 RMBRACK	]
1149 RSBRACK	)
1150 SEMICOLON	;
1151 printf	printf
1152 LSBRACK	(
1153 IDEN	sz2
1154 LMBRACK	[
1155 NUMBER	0
1156 RMBRACK	]
1157 RSBRACK	)
1158 SEMICOLON	;
1159 RBBRACK	}
1160 else	else
1161 LBBRACK	{
1162 RBBRACK	}
1163 if	if
1164 LSBRACK	(
1165 IDEN	key
1166 GTR	>
1167 NUMBER	6
1168 RSBRACK	)
1169 LBBRACK	{
1170 IDEN	c
1171 BECOMES	=
1172 IDEN	a
1173 TIMES	*
1174 IDEN	b
1175 SEMICOLON	;
1176 IDEN	sz2
1177 LMBRACK	[
1178 NUMBER	1
1179 RMBRACK	]
1180 BECOMES	=
1181 IDEN	sz2
1182 LMBRACK	[
1183 NUMBER	1
1184 RMBRACK	]
1185 PLUS	+
1186 IDEN	c
1187 SEMICOLON	;
1188 IDEN	sz
1189 LMBRACK	[
1190 NUMBER	1
1191 RMBRACK	]
1192 BECOMES	=
1193 IDEN	sz
1194 LMBRACK	[
1195 NUMBER	1
1196 RMBRACK	]
1197 PLUS	+
1198 NUMBER	1
1199 SEMICOLON	;
1200 printf	printf
1201 LSBRACK	(
1202 IDEN	c
1203 RSBRACK	)
1204 SEMICOLON	;
1205 printf	printf
1206 LSBRACK	(
1207 IDEN	sz
1208 LMBRACK	[
1209 NUMBER	1
1210 RMBRACK	]
1211 RSBRACK	)
1212 SEMICOLON	;
1213 printf	printf
1214 LSBRACK	(
1215 IDEN	sz2
1216 LMBRACK	[
1217 NUMBER	1
1218 RMBRACK	]
1219 RSBRACK	)
1220 SEMICOLON	;
1221 RBBRACK	}
1222 else	else
1223 LBBRACK	{
1224 RBBRACK	}
1225 if	if
1226 LSBRACK	(
1227 IDEN	key
1228 GEQ	>=
1229 NUMBER	6
1230 RSBRACK	)
1231 LBBRACK	{
1232 IDEN	d
1233 BECOMES	=
1234 PLUS	+
1235 IDEN	a
1236 IDIV	/
1237 IDEN	b
1238 SEMICOLON	;
1239 IDEN	sz2
1240 LMBRACK	[
1241 NUMBER	2
1242 RMBRACK	]
1243 BECOMES	=
1244 IDEN	sz2
1245 LMBRACK	[
1246 NUMBER	2
1247 RMBRACK	]
1248 PLUS	+
1249 IDEN	d
1250 SEMICOLON	;
1251 IDEN	sz
1252 LMBRACK	[
1253 NUMBER	2
1254 RMBRACK	]
1255 BECOMES	=
1256 IDEN	sz
1257 LMBRACK	[
1258 NUMBER	2
1259 RMBRACK	]
1260 PLUS	+
1261 NUMBER	1
1262 SEMICOLON	;
1263 printf	printf
1264 LSBRACK	(
1265 IDEN	d
1266 RSBRACK	)
1267 SEMICOLON	;
1268 printf	printf
1269 LSBRACK	(
1270 IDEN	sz
1271 LMBRACK	[
1272 NUMBER	2
1273 RMBRACK	]
1274 RSBRACK	)
1275 SEMICOLON	;
1276 printf	printf
1277 LSBRACK	(
1278 IDEN	sz2
1279 LMBRACK	[
1280 NUMBER	2
1281 RMBRACK	]
1282 RSBRACK	)
1283 SEMICOLON	;
1284 RBBRACK	}
1285 else	else
1286 LBBRACK	{
1287 RBBRACK	}
1288 if	if
1289 LSBRACK	(
1290 IDEN	key
1291 NEQ	!=
1292 NUMBER	4
1293 RSBRACK	)
1294 LBBRACK	{
1295 IDEN	a
1296 BECOMES	=
1297 IDEN	a
1298 MINUS	-
1299 NUMBER	1
1300 IDIV	/
1301 IDEN	coz
1302 SEMICOLON	;
1303 IDEN	sz2
1304 LMBRACK	[
1305 NUMBER	3
1306 RMBRACK	]
1307 BECOMES	=
1308 IDEN	sz2
1309 LMBRACK	[
1310 NUMBER	3
1311 RMBRACK	]
1312 PLUS	+
1313 IDEN	a
1314 PLUS	+
1315 CHAR	c
1316 SEMICOLON	;
1317 IDEN	sz
1318 LMBRACK	[
1319 NUMBER	3
1320 RMBRACK	]
1321 BECOMES	=
1322 IDEN	sz
1323 LMBRACK	[
1324 NUMBER	3
1325 RMBRACK	]
1326 PLUS	+
1327 NUMBER	1
1328 SEMICOLON	;
1329 printf	printf
1330 LSBRACK	(
1331 IDEN	a
1332 RSBRACK	)
1333 SEMICOLON	;
1334 printf	printf
1335 LSBRACK	(
1336 IDEN	sz
1337 LMBRACK	[
1338 NUMBER	3
1339 RMBRACK	]
1340 RSBRACK	)
1341 SEMICOLON	;
1342 printf	printf
1343 LSBRACK	(
1344 IDEN	sz2
1345 LMBRACK	[
1346 NUMBER	3
1347 RMBRACK	]
1348 RSBRACK	)
1349 SEMICOLON	;
1350 RBBRACK	}
1351 else	else
1352 LBBRACK	{
1353 RBBRACK	}
1354 if	if
1355 LSBRACK	(
1356 IDEN	key
1357 EQL	==
1358 NUMBER	4
1359 RSBRACK	)
1360 LBBRACK	{
1361 IDEN	a
1362 BECOMES	=
1363 MINUS	-
1364 IDEN	a
1365 PLUS	+
1366 NUMBER	2
1367 TIMES	*
1368 IDEN	coz
1369 SEMICOLON	;
1370 IDEN	sz
1371 LMBRACK	[
1372 NUMBER	4
1373 RMBRACK	]
1374 BECOMES	=
1375 IDEN	sz
1376 LMBRACK	[
1377 NUMBER	4
1378 RMBRACK	]
1379 PLUS	+
1380 NUMBER	1
1381 SEMICOLON	;
1382 printf	printf
1383 LSBRACK	(
1384 IDEN	a
1385 RSBRACK	)
1386 SEMICOLON	;
1387 printf	printf
1388 LSBRACK	(
1389 IDEN	sz
1390 LMBRACK	[
1391 NUMBER	4
1392 RMBRACK	]
1393 RSBRACK	)
1394 SEMICOLON	;
1395 printf	printf
1396 LSBRACK	(
1397 IDEN	sz2
1398 LMBRACK	[
1399 NUMBER	4
1400 RMBRACK	]
1401 RSBRACK	)
1402 SEMICOLON	;
1403 RBBRACK	}
1404 else	else
1405 LBBRACK	{
1406 RBBRACK	}
1407 if	if
1408 LSBRACK	(
1409 IDEN	key
1410 RSBRACK	)
1411 LBBRACK	{
1412 printf	printf
1413 LSBRACK	(
1414 PLUS	+
1415 IDEN	a
1416 RSBRACK	)
1417 SEMICOLON	;
1418 RBBRACK	}
1419 else	else
1420 LBBRACK	{
1421 RBBRACK	}
1422 RBBRACK	}
1423 case	case
1424 NUMBER	3
1425 COLON	:
1426 LBBRACK	{
1427 printf	printf
1428 LSBRACK	(
1429 STRING	test function:
1430 RSBRACK	)
1431 SEMICOLON	;
1432 if	if
1433 LSBRACK	(
1434 IDEN	key
1435 RSBRACK	)
1436 IDEN	sz2
1437 LMBRACK	[
1438 NUMBER	4
1439 RMBRACK	]
1440 BECOMES	=
1441 IDEN	f
1442 LSBRACK	(
1443 MINUS	-
1444 NUMBER	2
1445 COMMA	,
1446 NUMBER	3
1447 RSBRACK	)
1448 PLUS	+
1449 LSBRACK	(
1450 NUMBER	5
1451 PLUS	+
1452 NUMBER	1
1453 RSBRACK	)
1454 TIMES	*
1455 IDEN	coz
1456 SEMICOLON	;
1457 else	else
1458 LBBRACK	{
1459 RBBRACK	}
1460 IDEN	t
1461 LSBRACK	(
1462 IDEN	conb
1463 RSBRACK	)
1464 SEMICOLON	;
1465 printf	printf
1466 LSBRACK	(
1467 IDEN	f2
1468 LSBRACK	(
1469 CHAR	a
1470 RSBRACK	)
1471 RSBRACK	)
1472 SEMICOLON	;
1473 printf	printf
1474 LSBRACK	(
1475 IDEN	sz2
1476 LMBRACK	[
1477 NUMBER	4
1478 RMBRACK	]
1479 RSBRACK	)
1480 SEMICOLON	;
1481 RBBRACK	}
1482 case	case
1483 NUMBER	4
1484 COLON	:
1485 LBBRACK	{
1486 printf	printf
1487 LSBRACK	(
1488 STRING	test switch:
1489 RSBRACK	)
1490 SEMICOLON	;
1491 scanf	scanf
1492 LSBRACK	(
1493 IDEN	key
1494 RSBRACK	)
1495 SEMICOLON	;
1496 switch	switch
1497 LSBRACK	(
1498 IDEN	key
1499 TIMES	*
1500 NUMBER	1
1501 RSBRACK	)
1502 LBBRACK	{
1503 case	case
1504 NUMBER	0
1505 COLON	:
1506 printf	printf
1507 LSBRACK	(
1508 STRING	key is 0
1509 RSBRACK	)
1510 SEMICOLON	;
1511 case	case
1512 NUMBER	1
1513 COLON	:
1514 printf	printf
1515 LSBRACK	(
1516 STRING	key is 
1517 COMMA	,
1518 IDEN	key
1519 RSBRACK	)
1520 SEMICOLON	;
1521 case	case
1522 NUMBER	2
1523 COLON	:
1524 printf	printf
1525 LSBRACK	(
1526 STRING	key is 2
1527 RSBRACK	)
1528 SEMICOLON	;
1529 RBBRACK	}
1530 scanf	scanf
1531 LSBRACK	(
1532 IDEN	e
1533 RSBRACK	)
1534 SEMICOLON	;
1535 switch	switch
1536 LSBRACK	(
1537 IDEN	e
1538 RSBRACK	)
1539 LBBRACK	{
1540 case	case
1541 CHAR	a
1542 COLON	:
1543 printf	printf
1544 LSBRACK	(
1545 PLUS	+
1546 PLUS	+
1547 NUMBER	2
1548 RSBRACK	)
1549 SEMICOLON	;
1550 case	case
1551 CHAR	b
1552 COLON	:
1553 printf	printf
1554 LSBRACK	(
1555 PLUS	+
1556 NUMBER	2
1557 PLUS	+
1558 MINUS	-
1559 NUMBER	2
1560 RSBRACK	)
1561 SEMICOLON	;
1562 RBBRACK	}
1563 RBBRACK	}
1564 RBBRACK	}
1565 IDEN	nest
1566 SEMICOLON	;
1567 return	return
1568 SEMICOLON	;
1569 RBBRACK	}
