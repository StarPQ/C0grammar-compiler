1 const	const
2 int	0
3 IDEN	const_int0
4 BECOMES	=
5 NUMBER	1
6 SEMICOLON	;
7 const	const
8 int	10
9 IDEN	const_int1
10 BECOMES	=
11 NUMBER	1
12 SEMICOLON	;
13 const	const
14 int	1
15 IDEN	const_int2
16 BECOMES	=
17 NUMBER	2
18 COMMA	,
19 IDEN	const_int3
20 BECOMES	=
21 PLUS	+
22 NUMBER	3
23 SEMICOLON	;
24 const	const
25 char	char
26 IDEN	const_char1
27 BECOMES	=
28 CHAR	a
29 SEMICOLON	;
30 const	const
31 char	char
32 IDEN	const_char2
33 BECOMES	=
34 CHAR	1
35 COMMA	,
36 IDEN	const_char3
37 BECOMES	=
38 CHAR	+
39 SEMICOLON	;
40 int	3
41 IDEN	var_int0
42 SEMICOLON	;
43 int	3
44 IDEN	var_int1
45 COMMA	,
46 IDEN	var_int2
47 SEMICOLON	;
48 int	3
49 IDEN	var_int_array0
50 LMBRACK	[
51 NUMBER	3
52 RMBRACK	]
53 SEMICOLON	;
54 char	char
55 IDEN	var_char0
56 SEMICOLON	;
57 char	char
58 IDEN	var_char1
59 COMMA	,
60 IDEN	var_char2
61 SEMICOLON	;
62 char	char
63 IDEN	var_char_array0
64 LMBRACK	[
65 NUMBER	3
66 RMBRACK	]
67 SEMICOLON	;
68 int	3
69 IDEN	proc1
70 LBBRACK	{
71 return	return
72 LSBRACK	(
73 NUMBER	0
74 RSBRACK	)
75 SEMICOLON	;
76 printf	printf
77 LSBRACK	(
78 STRING	error: reach end of proc1! return error\n
79 RSBRACK	)
80 SEMICOLON	;
81 RBBRACK	}
82 int	0
83 IDEN	testreturn
84 LSBRACK	(
85 int	0
86 IDEN	para
87 RSBRACK	)
88 LBBRACK	{
89 return	return
90 LSBRACK	(
91 MINUS	-
92 IDEN	para
93 PLUS	+
94 IDEN	para
95 TIMES	*
96 NUMBER	2
97 RSBRACK	)
98 SEMICOLON	;
99 printf	printf
100 LSBRACK	(
101 STRING	error: reach end of testreturn! return error\n
102 RSBRACK	)
103 SEMICOLON	;
104 RBBRACK	}
105 int	2
106 IDEN	test
107 LSBRACK	(
108 int	2
109 IDEN	para
110 RSBRACK	)
111 LBBRACK	{
112 if	if
113 LSBRACK	(
114 IDEN	para
115 EQL	==
116 NUMBER	1
117 RSBRACK	)
118 return	return
119 LSBRACK	(
120 NUMBER	1
121 RSBRACK	)
122 SEMICOLON	;
123 else	else
124 return	return
125 LSBRACK	(
126 IDEN	test
127 LSBRACK	(
128 IDEN	para
129 MINUS	-
130 NUMBER	1
131 RSBRACK	)
132 TIMES	*
133 NUMBER	2
134 RSBRACK	)
135 SEMICOLON	;
136 RBBRACK	}
137 void	void
138 IDEN	proc2
139 LSBRACK	(
140 int	2
141 IDEN	para1
142 COMMA	,
143 int	2
144 IDEN	para2
145 COMMA	,
146 char	char
147 IDEN	para3
148 RSBRACK	)
149 LBBRACK	{
150 printf	printf
151 LSBRACK	(
152 STRING	reach end of proc1!\n
153 RSBRACK	)
154 SEMICOLON	;
155 RBBRACK	}
156 void	void
157 IDEN	testbranch
158 LSBRACK	(
159 int	2
160 IDEN	a
161 RSBRACK	)
162 LBBRACK	{
163 while	while
164 LSBRACK	(
165 IDEN	a
166 LSS	<
167 NUMBER	5
168 RSBRACK	)
169 IDEN	a
170 BECOMES	=
171 IDEN	a
172 PLUS	+
173 NUMBER	1
174 SEMICOLON	;
175 switch	switch
176 LSBRACK	(
177 IDEN	a
178 RSBRACK	)
179 LBBRACK	{
180 case	case
181 NUMBER	1
182 COLON	:
183 printf	printf
184 LSBRACK	(
185 STRING	case 10, a=
186 COMMA	,
187 IDEN	a
188 RSBRACK	)
189 SEMICOLON	;
190 case	case
191 NUMBER	1
192 COLON	:
193 printf	printf
194 LSBRACK	(
195 STRING	case 11, a=
196 COMMA	,
197 IDEN	a
198 RSBRACK	)
199 SEMICOLON	;
200 case	case
201 NUMBER	1
202 COLON	:
203 printf	printf
204 LSBRACK	(
205 STRING	case 12, a=
206 COMMA	,
207 IDEN	a
208 RSBRACK	)
209 SEMICOLON	;
210 default	default
211 COLON	:
212 printf	printf
213 LSBRACK	(
214 STRING	default
215 RSBRACK	)
216 SEMICOLON	;
217 RBBRACK	}
218 RBBRACK	}
219 void	void
220 IDEN	testsymbols
221 LBBRACK	{
222 int	12
223 IDEN	c
224 COMMA	,
225 IDEN	a
226 COMMA	,
227 IDEN	b
228 SEMICOLON	;
229 IDEN	c
230 BECOMES	=
231 NUMBER	0
232 SEMICOLON	;
233 IDEN	a
234 BECOMES	=
235 NUMBER	3
236 SEMICOLON	;
237 IDEN	b
238 BECOMES	=
239 NUMBER	2
240 SEMICOLON	;
241 printf	printf
242 LSBRACK	(
243 STRING	start symbol test!\n
244 RSBRACK	)
245 SEMICOLON	;
246 if	if
247 LSBRACK	(
248 IDEN	a
249 LSS	<
250 IDEN	b
251 RSBRACK	)
252 printf	printf
253 LSBRACK	(
254 STRING	< error\n
255 RSBRACK	)
256 SEMICOLON	;
257 else	else
258 printf	printf
259 LSBRACK	(
260 STRING	pass < test\n
261 RSBRACK	)
262 SEMICOLON	;
263 if	if
264 LSBRACK	(
265 IDEN	b
266 GTR	>
267 IDEN	a
268 RSBRACK	)
269 printf	printf
270 LSBRACK	(
271 STRING	> error\n
272 RSBRACK	)
273 SEMICOLON	;
274 else	else
275 printf	printf
276 LSBRACK	(
277 STRING	pass > test\n
278 RSBRACK	)
279 SEMICOLON	;
280 if	if
281 LSBRACK	(
282 IDEN	a
283 LEQ	<=
284 IDEN	b
285 RSBRACK	)
286 printf	printf
287 LSBRACK	(
288 STRING	<= error\n
289 RSBRACK	)
290 SEMICOLON	;
291 else	else
292 printf	printf
293 LSBRACK	(
294 STRING	pass <= test\n
295 RSBRACK	)
296 SEMICOLON	;
297 if	if
298 LSBRACK	(
299 IDEN	b
300 GEQ	>=
301 IDEN	a
302 RSBRACK	)
303 printf	printf
304 LSBRACK	(
305 STRING	>= error\n
306 RSBRACK	)
307 SEMICOLON	;
308 else	else
309 printf	printf
310 LSBRACK	(
311 STRING	pass >= test\n
312 RSBRACK	)
313 SEMICOLON	;
314 if	if
315 LSBRACK	(
316 IDEN	b
317 NEQ	!=
318 IDEN	b
319 RSBRACK	)
320 printf	printf
321 LSBRACK	(
322 STRING	!= error\n
323 RSBRACK	)
324 SEMICOLON	;
325 else	else
326 printf	printf
327 LSBRACK	(
328 STRING	pass != test\n
329 RSBRACK	)
330 SEMICOLON	;
331 if	if
332 LSBRACK	(
333 IDEN	b
334 EQL	==
335 IDEN	a
336 RSBRACK	)
337 printf	printf
338 LSBRACK	(
339 STRING	== error\n
340 RSBRACK	)
341 SEMICOLON	;
342 else	else
343 printf	printf
344 LSBRACK	(
345 STRING	pass == test\n
346 RSBRACK	)
347 SEMICOLON	;
348 IDEN	a
349 BECOMES	=
350 NUMBER	1
351 SEMICOLON	;
352 IDEN	b
353 BECOMES	=
354 NUMBER	2
355 SEMICOLON	;
356 IDEN	c
357 BECOMES	=
358 IDEN	a
359 PLUS	+
360 IDEN	b
361 SEMICOLON	;
362 if	if
363 LSBRACK	(
364 IDEN	c
365 EQL	==
366 NUMBER	3
367 RSBRACK	)
368 printf	printf
369 LSBRACK	(
370 STRING	pass + check\n
371 RSBRACK	)
372 SEMICOLON	;
373 else	else
374 printf	printf
375 LSBRACK	(
376 STRING	+ error\n
377 RSBRACK	)
378 SEMICOLON	;
379 IDEN	c
380 BECOMES	=
381 IDEN	a
382 PLUS	+
383 IDEN	b
384 SEMICOLON	;
385 if	if
386 LSBRACK	(
387 IDEN	c
388 EQL	==
389 MINUS	-
390 NUMBER	1
391 RSBRACK	)
392 printf	printf
393 LSBRACK	(
394 STRING	pass - test\n
395 RSBRACK	)
396 SEMICOLON	;
397 else	else
398 printf	printf
399 LSBRACK	(
400 STRING	- error\n
401 RSBRACK	)
402 SEMICOLON	;
403 IDEN	c
404 BECOMES	=
405 IDEN	a
406 TIMES	*
407 IDEN	b
408 SEMICOLON	;
409 if	if
410 LSBRACK	(
411 IDEN	c
412 EQL	==
413 NUMBER	2
414 RSBRACK	)
415 printf	printf
416 LSBRACK	(
417 STRING	pass * check\n
418 RSBRACK	)
419 SEMICOLON	;
420 else	else
421 printf	printf
422 LSBRACK	(
423 STRING	* error\n
424 RSBRACK	)
425 SEMICOLON	;
426 IDEN	c
427 BECOMES	=
428 IDEN	b
429 IDIV	/
430 IDEN	a
431 SEMICOLON	;
432 if	if
433 LSBRACK	(
434 IDEN	c
435 NEQ	!=
436 NUMBER	2
437 RSBRACK	)
438 printf	printf
439 LSBRACK	(
440 STRING	pass / test\n
441 RSBRACK	)
442 SEMICOLON	;
443 else	else
444 printf	printf
445 LSBRACK	(
446 STRING	/ error\n
447 RSBRACK	)
448 SEMICOLON	;
449 RBBRACK	}
450 void	void
451 main	main
452 LSBRACK	(
453 RSBRACK	)
454 LBBRACK	{
455 int	2
456 IDEN	a
457 COMMA	,
458 IDEN	b
459 COMMA	,
460 IDEN	c
461 SEMICOLON	;
462 int	2
463 IDEN	temp
464 SEMICOLON	;
465 IDEN	temp
466 BECOMES	=
467 NUMBER	0
468 SEMICOLON	;
469 scanf	scanf
470 LSBRACK	(
471 IDEN	a
472 COMMA	,
473 IDEN	b
474 COMMA	,
475 IDEN	c
476 RSBRACK	)
477 SEMICOLON	;
478 printf	printf
479 LSBRACK	(
480 STRING	%d, %d, %d
481 COMMA	,
482 IDEN	a
483 RSBRACK	)
484 SEMICOLON	;
485 printf	printf
486 LSBRACK	(
487 STRING	this is test of scanf & printf\n
488 RSBRACK	)
489 SEMICOLON	;
490 printf	printf
491 LSBRACK	(
492 IDEN	a
493 PLUS	+
494 IDEN	b
495 RSBRACK	)
496 SEMICOLON	;
497 IDEN	temp
498 BECOMES	=
499 IDEN	proc1
500 SEMICOLON	;
501 if	if
502 LSBRACK	(
503 IDEN	temp
504 EQL	==
505 NUMBER	0
506 RSBRACK	)
507 printf	printf
508 LSBRACK	(
509 STRING	return of proc1 correct\n
510 RSBRACK	)
511 SEMICOLON	;
512 else	else
513 printf	printf
514 LSBRACK	(
515 STRING	return of proc1 error\n
516 RSBRACK	)
517 SEMICOLON	;
518 IDEN	temp
519 BECOMES	=
520 IDEN	testreturn
521 LSBRACK	(
522 IDEN	const_int3
523 RSBRACK	)
524 SEMICOLON	;
525 if	if
526 LSBRACK	(
527 IDEN	temp
528 EQL	==
529 IDEN	const_int3
530 RSBRACK	)
531 printf	printf
532 LSBRACK	(
533 STRING	return of testreturn correct\n
534 RSBRACK	)
535 SEMICOLON	;
536 else	else
537 printf	printf
538 LSBRACK	(
539 STRING	return of testreturn error\n
540 RSBRACK	)
541 SEMICOLON	;
542 IDEN	testsymbols
543 SEMICOLON	;
544 IDEN	testbranch
545 LSBRACK	(
546 NUMBER	3
547 RSBRACK	)
548 SEMICOLON	;
549 IDEN	testbranch
550 LSBRACK	(
551 NUMBER	1
552 RSBRACK	)
553 SEMICOLON	;
554 SEMICOLON	;
555 IDEN	a
556 BECOMES	=
557 IDEN	test
558 LSBRACK	(
559 NUMBER	5
560 RSBRACK	)
561 SEMICOLON	;
562 if	if
563 LSBRACK	(
564 IDEN	a
565 EQL	==
566 NUMBER	1
567 RSBRACK	)
568 printf	printf
569 LSBRACK	(
570 STRING	pass test\n
571 RSBRACK	)
572 SEMICOLON	;
573 else	else
574 printf	printf
575 LSBRACK	(
576 STRING	test fail\n
577 RSBRACK	)
578 SEMICOLON	;
579 RBBRACK	}
