1 const	const
2 int	0
3 IDEN	a0
4 BECOMES	=
5 NUMBER	101
6 COMMA	,
7 IDEN	b0
8 BECOMES	=
9 NUMBER	2
10 SEMICOLON	;
11 const	const
12 char	char
13 IDEN	c0
14 BECOMES	=
15 CHAR	a
16 COMMA	,
17 IDEN	d0
18 BECOMES	=
19 CHAR	6
20 SEMICOLON	;
21 int	2
22 IDEN	inx
23 COMMA	,
24 IDEN	inarr
25 LMBRACK	[
26 NUMBER	23
27 RMBRACK	]
28 SEMICOLON	;
29 char	char
30 IDEN	charx
31 COMMA	,
32 IDEN	chararr
33 LMBRACK	[
34 NUMBER	2
35 RMBRACK	]
36 SEMICOLON	;
37 int	2
38 IDEN	fun1
39 LSBRACK	(
40 int	2
41 IDEN	a
42 COMMA	,
43 char	char
44 IDEN	b
45 RSBRACK	)
46 LBBRACK	{
47 if	if
48 LSBRACK	(
49 IDEN	a
50 GTR	>
51 NUMBER	0
52 RSBRACK	)
53 IDEN	fun1
54 LSBRACK	(
55 MINUS	-
56 IDEN	a
57 COMMA	,
58 IDEN	b
59 RSBRACK	)
60 SEMICOLON	;
61 else	else
62 printf	printf
63 LSBRACK	(
64 IDEN	b
65 RSBRACK	)
66 SEMICOLON	;
67 return	return
68 LSBRACK	(
69 MINUS	-
70 IDEN	a
71 RSBRACK	)
72 SEMICOLON	;
73 RBBRACK	}
74 char	char
75 IDEN	fun2
76 LBBRACK	{
77 int	0
78 IDEN	q
79 COMMA	,
80 IDEN	p
81 SEMICOLON	;
82 IDEN	q
83 BECOMES	=
84 PLUS	+
85 NUMBER	3
86 TIMES	*
87 NUMBER	2
88 SEMICOLON	;
89 IDEN	p
90 BECOMES	=
91 IDEN	q
92 MINUS	-
93 NUMBER	2
94 SEMICOLON	;
95 if	if
96 LSBRACK	(
97 IDEN	q
98 NEQ	!=
99 IDEN	p
100 RSBRACK	)
101 IDEN	q
102 BECOMES	=
103 NUMBER	3
104 IDIV	/
105 NUMBER	3
106 SEMICOLON	;
107 else	else
108 IDEN	q
109 BECOMES	=
110 NUMBER	1
111 SEMICOLON	;
112 if	if
113 LSBRACK	(
114 IDEN	q
115 LSS	<
116 CHAR	t
117 RSBRACK	)
118 IDEN	p
119 BECOMES	=
120 NUMBER	233
121 SEMICOLON	;
122 else	else
123 IDEN	q
124 BECOMES	=
125 NUMBER	2
126 SEMICOLON	;
127 if	if
128 LSBRACK	(
129 NUMBER	3
130 EQL	==
131 NUMBER	500
132 RSBRACK	)
133 printf	printf
134 LSBRACK	(
135 IDEN	p
136 RSBRACK	)
137 SEMICOLON	;
138 else	else
139 IDEN	q
140 BECOMES	=
141 NUMBER	3
142 SEMICOLON	;
143 return	return
144 LSBRACK	(
145 CHAR	_
146 RSBRACK	)
147 SEMICOLON	;
148 RBBRACK	}
149 void	void
150 IDEN	fun3
151 LSBRACK	(
152 char	char
153 IDEN	b
154 COMMA	,
155 int	3
156 IDEN	c
157 RSBRACK	)
158 LBBRACK	{
159 const	const
160 int	3
161 IDEN	maa
162 BECOMES	=
163 NUMBER	201
164 COMMA	,
165 IDEN	mbb
166 BECOMES	=
167 MINUS	-
168 NUMBER	99
169 SEMICOLON	;
170 const	const
171 char	char
172 IDEN	chh
173 BECOMES	=
174 CHAR	+
175 COMMA	,
176 IDEN	chn
177 BECOMES	=
178 CHAR	/
179 COMMA	,
180 IDEN	chj
181 BECOMES	=
182 CHAR	j
183 SEMICOLON	;
184 int	99
185 IDEN	aaa
186 COMMA	,
187 IDEN	bbb
188 SEMICOLON	;
189 char	char
190 IDEN	ccc
191 LMBRACK	[
192 NUMBER	4
193 RMBRACK	]
194 COMMA	,
195 IDEN	ddd
196 SEMICOLON	;
197 scanf	scanf
198 LSBRACK	(
199 IDEN	aaa
200 COMMA	,
201 IDEN	bbb
202 RSBRACK	)
203 SEMICOLON	;
204 if	if
205 LSBRACK	(
206 MINUS	-
207 IDEN	bbb
208 RSBRACK	)
209 LBBRACK	{
210 while	while
211 LSBRACK	(
212 IDEN	aaa
213 GEQ	>=
214 IDEN	bbb
215 RSBRACK	)
216 LBBRACK	{
217 IDEN	aaa
218 BECOMES	=
219 IDEN	aaa
220 MINUS	-
221 NUMBER	10
222 SEMICOLON	;
223 RBBRACK	}
224 IDEN	ccc
225 LMBRACK	[
226 NUMBER	2
227 RMBRACK	]
228 BECOMES	=
229 CHAR	d
230 SEMICOLON	;
231 RBBRACK	}
232 else	else
233 printf	printf
234 LSBRACK	(
235 STRING	aaa: 
236 COMMA	,
237 IDEN	aaa
238 RSBRACK	)
239 SEMICOLON	;
240 printf	printf
241 LSBRACK	(
242 STRING	hello 
243 RSBRACK	)
244 SEMICOLON	;
245 printf	printf
246 LSBRACK	(
247 IDEN	aaa
248 PLUS	+
249 IDEN	bbb
250 RSBRACK	)
251 SEMICOLON	;
252 return	return
253 SEMICOLON	;
254 RBBRACK	}
255 void	void
256 IDEN	fun4
257 LBBRACK	{
258 int	2
259 IDEN	tmp
260 COMMA	,
261 IDEN	t
262 LMBRACK	[
263 NUMBER	10
264 RMBRACK	]
265 COMMA	,
266 IDEN	_as
267 SEMICOLON	;
268 IDEN	_as
269 BECOMES	=
270 NUMBER	0
271 SEMICOLON	;
272 IDEN	t
273 LMBRACK	[
274 NUMBER	2
275 RMBRACK	]
276 BECOMES	=
277 IDEN	_as
278 SEMICOLON	;
279 IDEN	tmp
280 BECOMES	=
281 IDEN	t
282 LMBRACK	[
283 NUMBER	2
284 RMBRACK	]
285 SEMICOLON	;
286 IDEN	t
287 LMBRACK	[
288 NUMBER	1
289 RMBRACK	]
290 BECOMES	=
291 LSBRACK	(
292 NUMBER	2
293 PLUS	+
294 NUMBER	2
295 RSBRACK	)
296 TIMES	*
297 MINUS	-
298 NUMBER	5
299 SEMICOLON	;
300 return	return
301 SEMICOLON	;
302 RBBRACK	}
303 void	void
304 main	main
305 LSBRACK	(
306 RSBRACK	)
307 LBBRACK	{
308 int	5
309 IDEN	z
310 SEMICOLON	;
311 char	char
312 IDEN	x
313 COMMA	,
314 IDEN	y
315 SEMICOLON	;
316 scanf	scanf
317 LSBRACK	(
318 IDEN	y
319 RSBRACK	)
320 SEMICOLON	;
321 printf	printf
322 LSBRACK	(
323 IDEN	y
324 RSBRACK	)
325 SEMICOLON	;
326 IDEN	z
327 BECOMES	=
328 IDEN	fun1
329 LSBRACK	(
330 NUMBER	2
331 COMMA	,
332 CHAR	7
333 RSBRACK	)
334 SEMICOLON	;
335 printf	printf
336 LSBRACK	(
337 IDEN	z
338 RSBRACK	)
339 SEMICOLON	;
340 IDEN	x
341 BECOMES	=
342 IDEN	fun2
343 SEMICOLON	;
344 printf	printf
345 LSBRACK	(
346 IDEN	y
347 RSBRACK	)
348 SEMICOLON	;
349 IDEN	fun3
350 LSBRACK	(
351 CHAR	r
352 COMMA	,
353 NUMBER	5
354 PLUS	+
355 NUMBER	6
356 RSBRACK	)
357 SEMICOLON	;
358 printf	printf
359 LSBRACK	(
360 IDEN	y
361 RSBRACK	)
362 SEMICOLON	;
363 IDEN	fun4
364 SEMICOLON	;
365 printf	printf
366 LSBRACK	(
367 IDEN	y
368 RSBRACK	)
369 SEMICOLON	;
370 printf	printf
371 LSBRACK	(
372 STRING	\n
373 RSBRACK	)
374 SEMICOLON	;
375 printf	printf
376 LSBRACK	(
377 IDEN	y
378 RSBRACK	)
379 SEMICOLON	;
380 printf	printf
381 LSBRACK	(
382 STRING	\n
383 RSBRACK	)
384 SEMICOLON	;
385 switch	switch
386 LSBRACK	(
387 IDEN	y
388 RSBRACK	)
389 LBBRACK	{
390 case	case
391 CHAR	c
392 COLON	:
393 printf	printf
394 LSBRACK	(
395 STRING	branch 1
396 RSBRACK	)
397 SEMICOLON	;
398 case	case
399 CHAR	v
400 COLON	:
401 printf	printf
402 LSBRACK	(
403 STRING	branch 2
404 RSBRACK	)
405 SEMICOLON	;
406 default	default
407 COLON	:
408 printf	printf
409 LSBRACK	(
410 STRING	branch 3
411 RSBRACK	)
412 SEMICOLON	;
413 RBBRACK	}
414 return	return
415 SEMICOLON	;
416 RBBRACK	}
